# Generated by Django 5.2.7 on 2025-10-03 22:13

import admissionapp.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CourseDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[
                            ("Master", "Master"),
                            ("Bachelor", "Bachelor"),
                            ("Plus2", "Plus2"),
                        ],
                        max_length=50,
                    ),
                ),
                ("course_name", models.CharField(max_length=100, unique=True)),
                ("course_code", models.CharField(max_length=10, unique=True)),
                (
                    "course_duration",
                    models.CharField(
                        choices=[
                            ("2 Years", "2 Years"),
                            ("3 Years", "3 Years"),
                            ("4 Years", "4 Years"),
                            ("5 Years", "5 Years"),
                        ],
                        max_length=10,
                    ),
                ),
                ("total_seats", models.PositiveIntegerField(default=40)),
                ("seats_filled", models.PositiveIntegerField(default=0)),
                (
                    "course_fee",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("course_add_date", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "course_desc",
                    models.TextField(blank=True, help_text="Overview, curriculum etc"),
                ),
                (
                    "min_requirement",
                    models.TextField(
                        blank=True,
                        help_text="Write as bullet sentences",
                        verbose_name="Minimum Requirement",
                    ),
                ),
                (
                    "bg_pic",
                    models.ImageField(
                        blank=True,
                        help_text="Upload a background image for the course",
                        null=True,
                        upload_to=admissionapp.models.course_bg_upload_path,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "mobile",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="10 digit mobile number",
                        max_length=10,
                        null=True,
                        unique=True,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("user_created_at", models.DateField(auto_now_add=True, null=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_user", models.BooleanField(default=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PersonalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dob", models.DateField(blank=True, null=True)),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female")],
                        max_length=1,
                    ),
                ),
                ("address", models.CharField(default="Itahari-20", max_length=100)),
                ("mother", models.CharField(default="Sita", max_length=100)),
                ("father", models.CharField(default="Ram", max_length=100)),
                ("grandfather", models.CharField(default="Hari", max_length=100)),
                ("citizenship_no", models.CharField(default="123789", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "profile_pic",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=admissionapp.models.user_profile_pics,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                        ],
                    ),
                ),
                (
                    "ctz_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="citizenship/",
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_info",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Application",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "application_no",
                    models.CharField(
                        default=admissionapp.models.generate_application_no,
                        max_length=15,
                        unique=True,
                    ),
                ),
                (
                    "application_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                            ("re-submit", "Re-submit"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("approved_rejected_date", models.DateTimeField(blank=True, null=True)),
                ("reason_to_reject", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="applications",
                        to="admissionapp.coursedetails",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user", "course"), name="unique_user_course"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="EducationalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("SEE", "SEE"),
                            ("Plus2", "Plus2"),
                            ("Bachelor", "Bachelor"),
                            ("Master", "Master"),
                        ],
                        default="SEE",
                        max_length=50,
                    ),
                ),
                (
                    "faculty",
                    models.CharField(
                        choices=[
                            ("Math", "Math"),
                            ("Science", "Science"),
                            ("Management", "Management"),
                            ("IT", "IT"),
                            ("Commerce", "Commerce"),
                            ("Engineering", "Engineering"),
                        ],
                        default="Commerce",
                        max_length=50,
                    ),
                ),
                ("course_name", models.CharField(max_length=50)),
                (
                    "university_name",
                    models.CharField(
                        choices=[
                            ("Nepal Board", "Nepal Board"),
                            ("Pokhara University", "Pokhara University"),
                            ("Purbanchal University", "Purbanchal University"),
                            ("Tribhuvan University", "Tribhuvan University"),
                        ],
                        default="Tribhuvan University",
                        max_length=100,
                    ),
                ),
                ("college_name", models.CharField(max_length=100)),
                (
                    "passed_year",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1990),
                            django.core.validators.MaxValueValidator(2100),
                        ]
                    ),
                ),
                (
                    "grade_percent",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ]
                    ),
                ),
                (
                    "upload_transcript1",
                    models.FileField(
                        help_text="(pdf or jpg)",
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "upload_transcript2",
                    models.FileField(
                        blank=True,
                        help_text="(pdf or jpg)",
                        null=True,
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "upload_character",
                    models.FileField(
                        help_text="(pdf or jpg)",
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "upload_license",
                    models.FileField(
                        blank=True,
                        help_text="(pdf or jpg)",
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "upload_other",
                    models.FileField(
                        blank=True,
                        help_text="(pdf or jpg)",
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                (
                    "upload_other1",
                    models.FileField(
                        blank=True,
                        help_text="(pdf or jpg)",
                        upload_to=admissionapp.models.educational_document_path,
                        validators=[
                            admissionapp.models.validate_file_extensions,
                            admissionapp.models.validate_file_size,
                            admissionapp.models.validate_file_content,
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="educational_infos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("user", "level"), name="uniq_user_level"
                    )
                ],
            },
        ),
    ]
